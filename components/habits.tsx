/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/FHAQ04uhCI7
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Button } from "@/components/ui/button"
import { Session } from "next-auth"
import { getHabits, Habit } from "@/db"
import { CreateHabitDialog } from "./create-habit-dialog"
import { HabitCard } from "./habit-card"
import { signOut } from "@/auth"

const calculateLast30DaysCount = (logs: string[]) => {
  const last30Days = new Date()
  last30Days.setDate(last30Days.getDate() - 30)
  return logs.filter((log) => new Date(log) > last30Days).length
}

const getShortMonthName = (month: number) => {
  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
  return months[month]
}

const calculateMonthlyCounts = (logs: string[]) => {
  const monthlyCounts: { name: string, count: number }[] = []
  const today = new Date()
  let month = today.getMonth()
  let year = today.getFullYear()
  for (let i = 0; i < 6; i++) {
    const monthLogs = logs.filter((log) => {
      const logDate = new Date(log)
      return logDate.getMonth() === month && logDate.getFullYear() === year
    })
    monthlyCounts.push({ name: getShortMonthName(month), count: monthLogs.length })
    month--
    if (month < 0) {
      month = 11
      year--
    }
  }
  monthlyCounts.reverse()
  return monthlyCounts
}

const calculateAll = (logs: string[]) => {
  return logs.map(l => ({
    value: 1,
    day: l
  }))
}

export async function Habits({ session }: { session: Session }) {
  const habits = await getHabits(session.user?.id || '')
  const habitProps = habits.map((habit: Habit) => ({
    habitId: habit.habitId,
    habitName: habit.habitName,
    habitDescription: habit.habitDescription,
    last30DaysCount: calculateLast30DaysCount(habit.logs || []),
    monthlyCounts: calculateMonthlyCounts(habit.logs || []),
    allCounts: calculateAll(habit.logs || []),
    isTodayLogged: habit.logs?.includes(new Date().toISOString().split('T')[0])
  }))

  return (
    <main className="flex flex-col gap-6 p-4 md:p-8">
      <header className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">My Habits</h1>
        <div className="flex items-center gap-4">
          <CreateHabitDialog />
          <form
            action={async () => {
              "use server"
              await signOut()
            }}
          >
            <Button variant="outline" type="submit">Sign Out</Button>
          </form>
        </div>
      </header>
      <section className="grid grid-cols-1 gap-6">
        {habitProps.sort((h1, h2) => h1.habitName < h2.habitName ? -1 : 1).map((prop: any) => (
          <HabitCard {...prop} key={prop.habitId}/>
        ))}
      </section>
    </main>
  )
}
